	<b><size=50>Aрифметические выражения</size></b>

    <size=45>Mы уже знаем, что выводить строки можно с помощью команды <b>cout</b>. Tочно так же можно выводить числа и результат вычисления выражений. Например, вот так выглядит программа, которая считает, чему равно <b>(2 + 3) * 5</b>:</size>

    	<size=45>#include <<color=#dd3f37>iostream</color>>

    	<color=#053ad1>using  namespace</color>  std;

	<color=#053ad1>int</color>  <color=#cc7b44>main</color>()
	{
	    cout  <<  (2  +  3)  *  5;
	    <color=#053ad1>return</color>  0;
	}</size>

    <size=45>Если запустить эту программу, то она выведет <b>25</b>. Сначала посчитается результат вычисления арифметического выражения, а затем он будет выведен. Посмотрим, какие арифметические операции умеет выполнять C++:</size>

       <b><size=45>Обозначение операции</size></b>	<b><size=45><size=60>ч</size>то она выполняет</size></b>
			<size=45>+</size>						<size=45>Сложение</size>
			<size=45>-</size>						<size=45>Вычитание</size>
			<size=45>*</size>						<size=45><size=60>у</size>множение</size>
			<size=45>/</size>					    <size=45>Деление нацело</size>
			<size=45>%</size>			   <size=45>Вычисление остатка от деления</size>

    <size=45><size=60>у</size> операций на C++ тот же приоритет, что и в обычной математике. Сначала выполняется умножение, деление и вычисление остатка, затем сложение и вычитание. Влиять на порядок операций можно с помощью скобок.</size>
    
    <size=45>С помощью операции деления можно узнать целую часть от деления одного числа на другое. Например, <b>7 / 3</b> будет равно <b>2</b>. A с помощью операции взятия остатка от деления можно узнать остаток от деления первого числа на второе. <b>7 % 3</b> будет равен <b>1</b>. Если число делится нацело, то остаток будет равен нулю, например, <b>8 % 4</b> даст <b>0</b>.</size>

	<b><size=50>Переменные</size></b>

    <size=45>Программа, которая всегда считает результат вычисления одного и того же выражения, довольно скучная и бестолковая. Полезная программа должна оперировать с различными данными без внесения изменений в код.</size>

    <size=45>Mожно представить себе, что программа сидит в кабинете, в который входит конвейер с входными значениями, а выходит конвейер с выводом (это поток <b>cout</b>). В кабинете стоят коробки с хламом, оставшемся от предыдущих жильцов, но мы можем ими воспользоваться, чтобы хранить в этих коробках свои вещи. Переменная, по сути, и является такой коробкой.</size>

    <size=45>Пока мы будем работать только с целочисленными переменными. Пусть мы хотим взять из горы неподписанных специальных коробочек для целых чисел две штуки и назвать их <b>x</b> и <b>y</b>. На языке C++ это будет записано как:

	<size=45><color=#053ad1>int</color>  <color=#297499>x</color>,  <color=#297499>y</color>;</size>

    <size=45>Слово <color=#053ad1>int</color> означает, что переменные будут целочисленные, затем перечисляются имена создаваемых переменных через запятую. В конце ставится точка с запятой.</size>

    <size=45>Если мы хотим присвоить значение переменной, то слева следует написать имя присваиваемой переменной, затем знак равно, а справа — арифметическое выражение, в котором могут использоваться числа и другие переменные. Например:</size>

	<size=45><color=#297499>x</color>  =  2  +  3;
	<color=#297499>y</color>  =  <color=#297499>x</color>  *  4;</size>

    <size=45>В результате выполнения этих операций в переменной <color=#297499>x</color> = <b>5</b>, а в переменная <color=#297499>y</color> = <b>20</b>.</size>

    <size=45>Переменные также можно считывать с клавиатуры. Для этого по аналогии с потоком вывода <b>cout</b> используется поток <b>cin</b> (console input). Этот как раз тот конвейер, по которому к нам приезжают числа. Как и в случае <b>cout</b>, вводимые значения разделяются стрелочками, только теперь они направлены вправо <b>“>>”</b>, так как мы забираем данные из потока <b>cin</b>. Вот пример программы, которая считывает два числа <b>a</b> и <b>b</b> и выводит их сумму:</size>

    	<size=45>#include <<color=#dd3f37>iostream</color>>

    	<color=#053ad1>using  namespace</color>  std;

	<color=#053ad1>int</color>  <color=#cc7b44>main</color>()
	{
	    <color=#053ad1>int</color>  <color=#297499>a</color>,  <color=#297499>b</color>;
	    cin  >>  <color=#297499>a</color>  >>  <color=#297499>b</color>;
	    cout  <<  <color=#297499>a</color>  +  <color=#297499>b</color>;
	    <color=#053ad1>return</color>  0;
	}</size>

    	<size=45>3апись <b>cin  >>  <color=#297499>a</color>  >>  <color=#297499>b</color><b> можно заменить строками:</size>

    	<size=45>cin  >>  <color=#297499>a</color>;
    	cin  >>  <color=#297499>b</color>;

    	которые будут делать тоже самое.</size>
