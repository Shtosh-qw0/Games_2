	<b><size=50><size=63>у</size>словный  оператор</size></b>

    <size=45>В этом разделе мы изучим условный оператор. Он соответствует естественным понятиям <b>«если»</b> и <b>«иначе»</b>.</size>

    <b><size=45>Пример программы с условным оператором</size></b>

    <size=45><size=60>ч</size>то такое условный оператор? Это очень просто: если выполнено условие, то нужно выполнять одно действие, а иначе — другое. По-английски <b>«если»</b> звучит как "<b><color=#871f93>if</color></b>", а <b>«иначе»</b> как "<b><color=#871f93>else</color></b>". Пусть перед нами стоит задача вывести модуль числа, не пользуясь функцией abs, с помощью конструкции <b><color=#871f93>if</color></b>-<b><color=#871f93>else</color></b>. Решение задачи:</size>

    	<size=45><color=#053ad1>  int</color>  <color=#297499>a</color>;

    	cin  >>  <color=#297499>a</color>;
    	<color=#871f93>if</color>  (<color=#297499>a</color>  >=  0) {
            cout  <<  <color=#297499>a</color>;
    	}  

	<color=#871f93>else</color> {
            cout  <<  -<color=#297499>a</color>;
    	}</size>

    <size=45>Первые две строки — это создание переменной и ее считывание. В следующей строке записано <b>«если a больше нуля»</b>. Если это условие выполнено, то будут выполняться действия, заключенные в фигурные скобки после <b><color=#871f93>if</color></b>. Если же условие не выполнено, то будут выполняться команды, заключенные в фигурные скобки после слова <b><color=#871f93>else</color></b> (иначе). Tаким образом, выполнение программы разветвляется, и будет выполнена только одна из двух ветвей. 

    <size=45>Mожно попробовать решить задачу без использования команды <b><color=#871f93>else</color></b>:</size>

	<size=45><color=#053ad1>int</color>  <color=#297499>a</color>;

	cin  >>  <color=#297499>a</color>;
	<color=#871f93>if</color>  (<color=#297499>a</color>  >  0) {
	    cout  <<  <color=#297499>a</color>;
	}

	<color=#871f93>if</color>  (<color=#297499>a</color>  <  0) {
	    cout  <<  -<color=#297499>a</color>;
	}</size>

    <size=45>Но эта программа не будет работать, если ввести число 0. Не выполнится ни один из условных операторов.</size>

	<b><size=50><size=63>л</size>огические выражения</size></b>

    <size=45>Рассмотрим подробнее, как работает условный оператор. Он должен выглядеть как <b><color=#871f93>if</color> (<логическое выражение>) { … }</b>. Сначала пишется слово <b><color=#871f93>if</color></b>, затем в круглых скобках пишется логическое выражение, а затем в фигурных скобках перечисляются команды, которые должны быть выполнены.</size>

    <size=45><size=60>л</size>огическое выражение - это выражение, которое может принимать значения <b>«истина» (“true”)</b> и <b>«ложь» (“false”)</b>. <size=63>л</size>огическое выражение имеет вид <b><арифметическое выражение> <сравнение> <арифметическое выражение></b>. Например, если у нас есть переменные <b>x</b> и <b>y</b> с какими-то значениями, то логическое выражение:
	
	<size=45><b>x + y < 3 * y</b></size>

	<size=45><i><b>- x + y</b></i> - первое арифметического выражения.</size>
	<size=45><i><b>- < (меньше)</b></i> - знак сравнения.</size>
	<size=45><i><b>- 3 * y</b></i> - второе арифметическое выражение.</size>

    <size=45>В логических выражениях допустимы следующие знаки сравнений:</size>

	<size=45><b>==</b> - равно</size>
	<size=45><b>!=</b> - не равно</size>
	<size=45><b><</b> - меньше</size>
	<size=45><b>></b> - больше</size>
	<size=45><b><=</b> - меньше или равно</size>
	<size=45><b>>=</b> - больше или равно</size>

    <size=60><color=red>Внимание!</color></size>

    <size=45>Очень часто при использовании сравнения на равенство <b>(==)</b> возникает ошибка: вместо двух значков «равно» можно написать один, и это будет корректная программа, но делать она будет совсем не то, чего мы от нее ждем. Например, попробуем написать программу, которая считывает два числа и выводит <b><color=#dd3f37>Yes</color>;</b>, если они одинаковые, и <b><color=#dd3f37>No</color>;</b> в противном случае:</size>

	<size=45><color=#053ad1>int</color>  <color=#297499>a</color>,  <color=#297499>b</color>;
	
	cin  >>  <color=#297499>a</color>  >>  <color=#297499>b</color>;
	<color=#871f93>if</color>  (<color=#297499>a</color>  =  <color=#297499>b</color>) {
    	    cout  <<  <color=#dd3f37>"Yes"</color>;
	} 

	else {
	    cout  <<  <color=#dd3f37>"No"</color>;
	}</size>

    <size=45>Эта программа будет выводить <b><color=#dd3f37>Yes</color></b>, даже если числа различны (и b не равно нулю).</size>

	<b><size=50><size=63>л</size>огические операторы</size></b>

    <size=45>Иногда возникает необходимость проверить более сложное условие, чем просто сравнение между собой двух чисел. Для этого можно воспользоваться логическими операторами. Посмотрим на примере: программе на вход дается количество глаз и ног у животного, и она должна пугаться, если это паук (с 8 глазами и 8 ногами). Решение:</size>

	<size=45><color=#053ad1>int</color>  <color=#297499>eyes</color>,  <color=#297499>legs</color>;
	
	cin  >>  <color=#297499>eyes</color>  >>  <color=#297499>legs</color>;
	<color=#871f93>if</color>  (<color=#297499>eyes</color>  ==  8  &&  <color=#297499>legs</color>  ==  8) {
	    cout << <color=#dd3f37>"AAAAA!!!"</color>;
	}</size>

    <size=45><size=60>л</size>огический оператор <b>&&</b> — это <b>«и»</b>. Tо есть условие будет верным, если и левое, и правое логические выражения истинны одновременно.</size>

    <size=45>Tакже существует логическая связка <b>«или»</b>, которая обозначается символами <b>«||»</b>, и унарная операция <b>«отрицание»</b> — ее знак <b>«!»</b> ставится перед выражением.</size>

    <size=45>В логических выражениях также существует порядок действий. Сначала выполняются отрицания, затем все арифметические операции, затем все <b>«и»</b>, только потом все <b>«или»</b>. На порядок действий также можно влиять с помощью скобок.</size>

	<b><size=50>Конструкция «иначе-если»</size></b>

    <size=45>В некоторых ситуациях нужно выбрать больше чем из двух вариантов.</size>

    	<b><size=45>Пример:</size></b>

    <size=45>Пусть нам звонит кто-то из друзей и предлагает заняться чем-нибудь. <size=60>ч</size>ислом 1 обозначим друга Ваню, который зовет нас играть в футбол, числом 2 — друга Сашу, который зовет нас вместе учить C++. A если нам звонит кто-нибудь другой, то мы сидим дома и смотрим сериал. Нужно по введенному числу сказать, чем мы будем заниматься. Решение этой задачи, использующее два оператора <b><color=#871f93>if</color></b>, выглядит так:</size>

	<size=45><color=#053ad1>int</color>  <color=#297499>who_call</color>;

	cin  >>  <color=#297499>who_call</color>;
	<color=#871f93>if</color>  (<color=#297499>who_call</color>  ==  1) {
	    cout  <<  <color=#dd3f37>"Football!!"</color>;
	} 

	<color=#871f93>else  if</color>  (<color=#297499>who_call</color>  ==  2) {
	    cout  <<  <color=#dd3f37>"C++!!!!!11"</color>;
	} 

	<color=#871f93>else</color> {
	    cout  <<  <color=#dd3f37>"Show"</color>;
	}</i>

    <size=45>Конструкция <b><color=#871f93>else  if</color></b> имеет смысл <b>«иначе-если»</b>. Дойти до сравнения цифры с двойкой можно только в случае, если уже произошло сравнение с единицей и мы пошли по ветви <b>«иначе»</b>. Последний <b><color=#871f93>else</color></b>, таким образом, выполнится только после того, как число сравнилось и с единицей, и с двойкой и ни одно из этих сравнений не было верным.</size>

    <size=45>Благодаря таким конструкциям можно обработать большое количество различных вариантов поведения программы.</size>


